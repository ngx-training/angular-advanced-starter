{"version":3,"sources":["webpack:///./src/app/settings/auth-guard.service.ts","webpack:///./src/app/settings/settings-routing.module.ts","webpack:///./src/app/settings/settings.component.html","webpack:///./src/app/settings/settings.component.scss","webpack:///./src/app/settings/settings.component.ts","webpack:///./src/app/settings/settings.model.ts","webpack:///./src/app/settings/settings.module.ts","webpack:///./src/app/settings/settings.resolver.ts"],"names":[],"mappings":"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","file":"app-settings-settings-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, CanLoad, Route } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate, CanLoad {\n  constructor() { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    return true;\n  }\n\n  canLoad(route: Route) {\n    return true;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { SettingsComponent } from './settings.component';\nimport { SettingsResolver } from './settings.resolver';\nimport { AuthGuard } from './auth-guard.service';\n\nconst routes = [\n  {\n    path: '',\n    component: SettingsComponent,\n    canLoad: [AuthGuard],\n    resolve: {\n      settings: SettingsResolver\n    }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SettingsRoutingModule { }\n","module.exports = \"<h1>User Settings</h1>\\n\\n<form novalidate [formGroup]=\\\"form\\\" (ngSubmit)=\\\"save()\\\">\\n  <div class=\\\"form-row\\\">\\n    <mat-radio-group formControlName=\\\"theme\\\">\\n      <mat-radio-button value=\\\"light\\\">Light</mat-radio-button>\\n      <mat-radio-button value=\\\"dark\\\">Dark</mat-radio-button>\\n    </mat-radio-group>\\n  </div>\\n\\n  <div class=\\\"form-row\\\">\\n    <mat-checkbox formControlName=\\\"isAdmin\\\">I am Admin!</mat-checkbox>\\n  </div>\\n\\n  <div class=\\\"form-row\\\">\\n    <app-input-integer formControlName=\\\"salary\\\" placeholder=\\\"Salary\\\" name=\\\"salary\\\"></app-input-integer>\\n  </div>\\n\\n  <div class=\\\"form-row\\\" formGroupName=\\\"password\\\">\\n    <mat-form-field>\\n      <input type=\\\"password\\\" matInput placeholder=\\\"Password with min 6 chars\\\" formControlName=\\\"value\\\" />\\n      <mat-error *ngIf=\\\"form.get('password.value').hasError('not_equal')\\\">\\n        Passwords must be\\n        <strong>equal</strong>\\n      </mat-error>\\n    </mat-form-field>\\n\\n    <mat-form-field>\\n      <input type=\\\"password\\\" matInput placeholder=\\\"Password again\\\" formControlName=\\\"repeat\\\" />\\n    </mat-form-field>\\n  </div>\\n\\n  <div class=\\\"form-row\\\" formArrayName=\\\"rights\\\">\\n    <label>Access Rights</label>\\n    <span>({{ form.get('rights').value | appJoin:'+' }})</span>\\n    <br />\\n    <button type=\\\"button\\\" (click)=\\\"addRight()\\\">\\n      <i class=\\\"material-icons md-12\\\">add</i>\\n    </button>\\n    <div *ngFor=\\\"let rightsControl of form.get('rights')['controls']; let i = index;\\\">\\n      <mat-form-field>\\n        <input matInput [formControlName]=\\\"i\\\" />\\n      </mat-form-field>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"form-row\\\">\\n    <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\">Save</button>\\n    <button mat-raised-button type=\\\"button\\\" (click)=\\\"reset()\\\">Cancel</button>\\n  </div>\\n\\n  <pre>form.getRawValue() = <br/>{{ form.getRawValue() | json }}</pre>\\n  <pre>form.valid() = <br/>{{ form.valid | json }}</pre>\\n</form>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL3NldHRpbmdzLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormGroup } from '@angular/forms/src/model';\nimport { Settings } from './settings.model';\nimport { SettingsService } from './settings.service';\nimport { MatSnackBar } from '@angular/material';\nimport { FormArray, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-settings',\n  styleUrls: ['./settings.component.scss'],\n  templateUrl: './settings.component.html',\n})\nexport class SettingsComponent implements OnInit {\n  private initialData: Settings;\n  form: FormGroup;\n\n  constructor(\n    private route: ActivatedRoute,\n    private settingsService: SettingsService,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit() {\n    this.initialData = JSON.parse(JSON.stringify(this.route.snapshot.data.settings));\n    this.form = Settings.toFormGroup(this.route.snapshot.data.settings);\n  }\n\n  save() {\n    this.settingsService.set(this.form.getRawValue())\n      .subscribe(_ => this.snackBar.open('Settings save successfully.', '', { duration: 1000 }));\n  }\n\n  addRight() {\n    (<FormArray>this.form.get('rights')).push(new FormControl());\n  }\n\n  reset() {\n    this.form = Settings.toFormGroup(this.initialData);\n  }\n}\n","import { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { integerValidator } from '../shared/input-integer/integer.validator';\n\nfunction passwordMatchesValidator(form: FormGroup): null {\n  const password = form.get('password.value');\n  const repeatedPassword = form.get('password.repeat');\n\n  if (password.value !== repeatedPassword.value) {\n    password.setErrors({ not_equal: true });\n  } else {\n    password.setErrors(null);\n  }\n\n  return null;\n}\n\nexport class Settings {\n  theme: Theme;\n  isAdmin = false;\n  password: {\n    value: string;\n    repeat?: string;\n  };\n  rights: string[] = [];\n  salary: number;\n\n  static toFormGroup(settings: Settings): FormGroup {\n    settings = settings || new Settings();\n    settings.password = settings.password || { value: null };\n\n    const formBuilder = new FormBuilder();\n\n    return formBuilder.group(\n      {\n        theme: formBuilder.control(settings.theme),\n        isAdmin: formBuilder.control(settings.isAdmin),\n        salary: formBuilder.control(settings.salary, integerValidator()),\n        password: formBuilder.group({\n          value: formBuilder.control(\n            settings.password.value,\n            Validators.minLength(6)\n          ),\n          repeat: formBuilder.control(\n            settings.password.repeat,\n            Validators.minLength(6)\n          )\n        }),\n        rights: formBuilder.array(settings.rights || [])\n      },\n      { validator: passwordMatchesValidator }\n    );\n  }\n}\n\nexport type Theme = 'light' | 'dark';\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { SettingsRoutingModule } from './settings-routing.module';\nimport { SettingsComponent } from './settings.component';\n\n@NgModule({\n  imports: [\n    SettingsRoutingModule,\n    SharedModule\n  ],\n  declarations: [SettingsComponent],\n})\nexport class SettingsModule { }\n","import { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Settings } from './settings.model';\nimport { Observable } from 'rxjs';\nimport { SettingsService } from './settings.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SettingsResolver implements Resolve<Settings> {\n  constructor(\n    private settingsService: SettingsService\n  ) { }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Settings> {\n    return this.settingsService.get();\n  }\n}\n"],"sourceRoot":""}